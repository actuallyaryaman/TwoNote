#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Dec 22, 2022 02:14:13 PM IST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
import tkinter.messagebox

_script = sys.argv[0]
_location = os.path.dirname(_script)

import baseui_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.map('TNotebook.Tab', background =
            [('selected', _bgcolor), ('active', _tabbg1),
            ('!active', _ana2color)], foreground =
            [('selected', _fgcolor), ('active', _tabfg1), ('!active',  _tabfg2)])
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("960x497+334+117")
        top.minsize(120, 1)
        top.maxsize(1540, 825)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        self.curfocus=tk.StringVar()
        self.curfocus.set(str(top.focus_get()))
        self.curfocus.trace('w',lambda x:print("Work"))
        self.top = top
        self.menuSelectedButton = tk.StringVar()

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(self.menubar, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,foreground='#000000', tearoff=0)
        self.menubar.add_cascade(compound='left', label='File', menu=self.sub_menu
                ,)
        self.sub_menu1 = tk.Menu(self.sub_menu, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,foreground='#000000', tearoff=0)
        self.sub_menu.add_cascade(compound='left', label='New'
                ,menu=self.sub_menu1, )
        self.sub_menu1.add_command(compound='left',label='Notebook')
        self.sub_menu1.add_command(compound='left',label='Page',command=baseui_support.adpg)
        self.sub_menu.add_command(compound='left',label='Open (Ctrl + O)')
        self.sub_menu.add_command(compound='left',label='Save(Ctrl +S)')
        self.sub_menu.add_command(compound='left',label='Save As..')
        self.sub_menu.add_command(compound='left',label='Close..')
        self.sub_menu12 = tk.Menu(self.menubar, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,foreground='#000000', tearoff=0)
        self.menubar.add_cascade(compound='left', label='Edit'
                ,menu=self.sub_menu12, )
        self.sub_menu12.add_command(compound='left',label='Undo (Ctrl +Z)')
        self.sub_menu12.add_command(compound='left',label='Redo (Ctrl + Y)')
        self.sub_menu12.add_command(compound='left',label='Paste (Ctrl +V)')
        self.sub_menu123 = tk.Menu(self.menubar, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,foreground='#000000', tearoff=0)
        self.menubar.add_cascade(compound='left', label='Options'
                ,menu=self.sub_menu123, )
        self.sub_menu1234 = tk.Menu(self.sub_menu123, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,foreground='#000000', tearoff=0)
        self.sub_menu123.add_cascade(compound='left', label='Theme'
                ,menu=self.sub_menu1234, )
        self.sub_menu1234.add_radiobutton(value='Light'
                ,variable=self.menuSelectedButton, compound='left', label='Light')
        self.sub_menu1234.add_radiobutton(value='Dark'
                ,variable=self.menuSelectedButton, compound='left', label='Dark')
        self.sub_menu123.add_command(compound='left',label='Sync')
        self.sub_menu12345 = tk.Menu(self.sub_menu123, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,foreground='#000000', tearoff=0)
        self.sub_menu123.add_cascade(compound='left', label='Connect'
                ,menu=self.sub_menu12345, )
        self.sub_menu12345.add_command(compound='left',label='GDrive')
        self.sub_menu12345.add_command(compound='left',label='OneDrive')
        self.sub_menu12345.add_command(compound='left',label='Mega')
        self.sub_menu123456 = tk.Menu(self.menubar, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,foreground='#000000', tearoff=0)
        self.menubar.add_cascade(compound='left', label='Help'
                ,menu=self.sub_menu123456, )
        self.sub_menu123456.add_command(compound='left',label='About PyNote',command=lambda x=None:tk.messagebox.showinfo("About","(\ \n\ '\ \n \ '\   __________  \n / '|   ()_________)\n \ '/    \ ~~~~~ \ \n   \       \ ~~~~~ \ \n  ==).   \ _________\ \n  (_ _)      ()_________)\nCreated by the AOG group\nCredits:\nAsvin\nAryaman\nSanchit\nRepo:https://github.com/assguardiansofthegalaxy/PyNote.git\n"))
        self.sub_menu123456.add_command(compound='left',label='Open Help')
        _style_code()
        self.TNotebook1 = ttk.Notebook(self.top)
        self.TNotebook1.place(relx=0.0, rely=0.0, relheight=0.96, relwidth=1.027)

        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(0, text='''Page 1''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1.bind('<Button>',lambda x:baseui_support.adpg() if((self.TNotebook1.index(self.TNotebook1.select()))==(baseui_support.pgcount-1)) else print(end =""))
        self.TNotebook1.bind('<ButtonRelease>',lambda x:baseui_support.adpg() if((self.TNotebook1.index(self.TNotebook1.select()))==(baseui_support.pgcount-1)) else print(end =""))
        self.TNotebook1.bind('<Double-Button-1>',lambda x:baseui_support.delpg() if((self.TNotebook1.index(self.TNotebook1.select()))!=(baseui_support.pgcount-1)) else print(end =""))
        self.TNotebook1_t1.configure(background="#d9d9d9")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(1, text='''Page 2''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t2.configure(background="#d9d9d9")
        self.TNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t2.configure(highlightcolor="black")
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.TNotebook1.tab(2, text='''New Page''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t3.configure(background="#d9d9d9")
        self.TNotebook1_t3.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t3.configure(highlightcolor="black")
        self.TNotebook1_t3.bind('<FocusIn>',lambda x=None:print("Here"))
        self.TNotebook1.select(2)
        self.newid=self.TNotebook1.index(self.TNotebook1.select())
        self.TNotebook1.select(0)
        self.Frame1 = tk.Frame(self.TNotebook1_t1)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=1.011, relwidth=0.978)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

    def popup1(self, event, *args, **kwargs):
        self.Popupmenu1 = tk.Menu(self.top, tearoff=0)
        self.Popupmenu1.configure(background=_bgcolor)
        self.Popupmenu1.configure(foreground=_fgcolor)
        self.Popupmenu1.configure(activebackground=_ana2color)
        self.Popupmenu1.configure(activeforeground='black')
        self.Popupmenu1.configure(font="TkMenuFont")
        self.Popupmenu1.post(event.x_root, event.y_root)

    def popup2(self, event, *args, **kwargs):
        self.Popupmenu2 = tk.Menu(self.top, tearoff=0)
        self.Popupmenu2.configure(background=_bgcolor)
        self.Popupmenu2.configure(foreground=_fgcolor)
        self.Popupmenu2.configure(activebackground=_ana2color)
        self.Popupmenu2.configure(activeforeground='black')
        self.Popupmenu2.configure(font="TkMenuFont")
        self.Popupmenu2.post(event.x_root, event.y_root)

def start_up():
    baseui_support.main()

if __name__ == '__main__':
    baseui_support.main()




